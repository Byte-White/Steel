mod lexer;
mod parser;
mod generator;

use std::fs::File;
use std::io::Read;
use std::env;
use lexer::Lexer;
use parser::Parser;
use generator::Generator;

fn main() {
    let args: Vec<String> = env::args().collect();
    if args.len()<2 {
        eprintln!("Usage: {} <filename>",args[0]);
        return;
    }
    // Attempt to open the file
    let mut file = match File::open(&args[1]) {
        Ok(file) => file,
        Err(e) => {
            // Handle the error if the file couldn't be opened
            eprintln!("Error opening file: {}", e);
            return;
        }
    };

    // Read the entire file contents into a String
    let mut src = String::new();
    if let Err(e) = file.read_to_string(&mut src) {
        // Handle the error if reading the file contents fails
        eprintln!("Error reading file: {}", e);
        return;
    }
    
    if args.contains(&"--test-src".to_string()){
        println!("src code:\n{}", src);
    }
    
    // Create a Lexer instance
    let generator = Generator::new();
    let mut lexer = Lexer::new(&src);
    lexer.lex();
    
    if args.contains(&"--test-tokens".to_string()){
        println!("---------tokens---------");
        // Call the lex method to tokenize the source code
        // Print the tokens generated by the lexer
        for token in &lexer.tokenlist {
            println!("token : {0}",token.text);
        }
        println!("------------------------");
    }
    let mut debug_parser = false;
    if args.contains(&"--test-parser".to_string()){
        debug_parser = true;
    }
    
    let mut parse: Parser = Parser::new(lexer.tokenlist,debug_parser,generator);
    parse.parse();
    parse.compile();
    println!("âœ… finished compiling.");
}